# Default parameters defined in WasteCarrierConfiguration
# http://www.dropwizard.io/1.3.1/docs/manual/configuration.html#man-configuration

# Added standard logging information
logging:
  # logging level (we set to ERROR in production to help us identify actual issues)
  level: ${WCRS_SERVICES_LOGLEVEL:-ERROR}
  appenders:
    # Settings for logging to stdout.
    - type: console
      # The lowest level of events to print to the console.
      threshold: ALL
      # The time zone to which event timestamps will be converted.
      timeZone: UTC
    # Setting for logging to file
    - type: file
      # The filename where current events are logged.
      currentLogFilename: ${WCRS_SERVICES_LOGFILE:-/srv/java/waste-carriers-service/logs/run.log}
      # The filename pattern for archived files. If the pattern ends with
      # .gz or .zip, files will be compressed as they are archived.
      archivedLogFilenamePattern: ${WCRS_SERVICES_LOGFILE_PATTERN:-/srv/java/waste-carriers-service/logs/run-archive-%d.log.gz}
      # The number of archived files to keep.
      archivedFileCount: 5
      # The time zone to which event timestamps will be converted.
      timeZone: UTC

server:
  # The port on which the HTTP server listens for service requests.
  # Because Java cannot drop privileges in a POSIX system, these
  # ports cannot be in the range 1-1024. A port value of 0 will
  # make the OS use an arbitrary unused port.
  applicationConnectors:
    - type: http
      port: 8003
  # The port on which the HTTP server listens for administrative
  # requests. Subject to the same limitations as "port". If this is
  # set to the same value as port, the admin routes will be mounted
  # under /admin.
  adminConnectors:
    - type: http
      port: 8004

# Registrations database connection properties
database:
  uri: ${WCRS_REGSDB_URI:-mongodb://mongoUser:password1234@localhost:27017/waste-carriers}
  # Server selection timeout is the number of milliseconds the mongo driver will
  # wait to select a server for an operation before giving up and raising an
  # error. The default should be left in production but in dev and test it
  # allows for quicker tests and failures
  # For details of other options you can set check out
  # http://api.mongodb.com/java/3.0/?com/mongodb/MongoClientOptions.html
  serverSelectionTimeout: ${WCRS_MONGODB_SERVER_SEL_TIMEOUT:-30000}

# Users database connection properties
userDatabase:
  uri: ${WCRS_USERSDB_URI:-mongodb://mongoUser:password1234@localhost:27017/waste-carriers-users}
  serverSelectionTimeout: ${WCRS_MONGODB_SERVER_SEL_TIMEOUT:-30000}

settings:
  # registration period (in years)
  registrationPeriod: ${WCRS_REGISTRATION_EXPIRES_AFTER:-3}
  # renew period (in months)
  registrationRenewPeriod: ${WCRS_REGISTRATION_RENEWAL_WINDOW:-3}
  # default number of results for search
  searchResultCount: ${WCRS_SERVICE_SEARCH_RESULT_COUNT:-50}

airbrake:
  url: ${WCRS_AIRBRAKE_URL}
  apiKey: ${WCRS_SERVICES_AIRBRAKE_PROJECT_KEY}
  environmentName: ${WCRS_SERVICES_AIRBRAKE_ENVNAME}
  # The 'threshold' here can take values: OFF, ERROR, WARN, INFO, DEBUG, TRACE
  # or ALL.  If no value is provided, or the value is unrecognised, by default
  # we only forward messages at ERROR severity.
  threshold: ${WCRS_SERVICES_AIRBRAKE_THRESHOLD:-ERROR}
  # Other values you can set for Airbrake integration, but not required:
  # enabled: true or false (default = true)
  # exceptionsOnly: true or false (default = false)

# IrRenewals brings a very limited set of data into Waste Carriers to allow
# IR customers to "renew" in the service.
irRenewals:
  irFolderPath: ${WCRS_IR_RENEWAL_FOLDERPATH:-/srv/java/waste-carriers-service/irdata/}

# Entity matching data allows us to match both the company and people in a
# registration against a list we maintain
entityMatching:
  # Path to the file which contains data on the entities to be matched against
  entitiesFilePath: ${WCRS_ENTITY_SEARCH_FOLDERPATH:-/srv/java/waste-carriers-service/entity_data/entities.csv}

exportJob:
  # File to use for EPR exports (note: file, not directory).
  eprExportFile: ${WCRS_EPR_EXPORT_FILE:-/srv/java/waste-carriers-service/exports/waste_carriers_epr_daily_full.csv}
  # Date format to use for EPR exports.
  eprExportDateFormat: "yyyy-MM-dd"
  # Path to use for Reporting Snapshot exports (note: directory, not file).
  reportingExportPath: ${WCRS_REPORTING_EXPORT_PATH:-/srv/java/waste-carriers-service/exports}
  # Date format to use for Reporting Snapshot exports.
  reportingExportDateFormat: "yyyy-MM-dd'T'HH:mm'Z'"
  # Money format to use for Reporting Snapshot exports.
  reportingExportMoneyFormat: "0.00"
  # Cron expression for scheduled job execution. Leave empty to make the job
  # run on a manual trigger only.  Default is daily at 9pm.
  cronExpression: ${WCRS_EXPORT_JOB_CRON_SCHEDULE:-0 0 21 1/1 * ? *}

registrationStatusJob:
  # Cron expression for scheduled job execution. Leave empty to make the job
  # run on a manual trigger only.  Default is daily at 8pm.
  cronExpression: ${WCRS_STATUS_JOB_CRON_SCHEDULE:-0 0 20 1/1 * ? *}

mock:
  # Once a payment is complete with worldpay it redirects the user to the
  # original client. In that redirection it passes a number of params of which
  # an admin code is one of them. As we don't receive it in any requests from
  # the client, we have to pull it from the environment
  worldPayAdminCode: ${WCRS_WORLDPAY_ADMIN_CODE:-ENVIRONMENTAGENCY}
  # Upon receiving the initial request from a service using worldpay, we have
  # to generate a url that the client should redirect the user to. So we need
  # to know what our own url is within the current environment. We first
  # look for a public domain, as that is what it would be in a production env.
  # Else we default to what it would be when all the services are running
  # locally
  servicesDomain: ${WCRS_PUBLIC_DOMAIN:-http://localhost:8003}
  # The mac secret is a password shared only between Worldpay and its customers.
  # Its used along with some information from the order to sign the success
  # response. In this way the client is sure its worldpay telling them the user
  # has completed payment and no one else. So again we need to grab this from
  # the environment.
  macSecret: ${WCRS_WORLDPAY_ECOM_MACSECRET:-macKeydaddyyeahfool@7}
  # To try and more closely mock calling out to Worldpay you can have the
  # service pause during each call. The default is a best guess at trying to
  # and take into account reading from the xml files/generating responses whilst
  # delaying enough to mimic a normal call to the service
  delay: ${WCRS_MOCK_DELAY:-200}
